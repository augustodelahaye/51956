import PilaLangVisitor from './generated/PilaLangVisitor.js';

export default class CustomPilaLangVisitor extends PilaLangVisitor {
    constructor() {
        super();
        this.jsCode = []; // Nuevo: almacena código JS
        this.pilaName = ""; 
        this.errores = []; // Mantener errores semánticos
    }

    // Mantener análisis semántico y agregar generación de código
   visitPrograma(ctx) {
    this.pilaName = ctx.nombre().ID().getText();
    this.jsCode.push(`// Generated by PilaLang\nglobal.${this.pilaName} = [];`); // Usar global en Node.js
    this.visitChildren(ctx);
    return this.jsCode.join('\n');
}

    visitCrear(ctx) {
        const elementos = ctx.lista().valor().map(v => this.visit(v)).join(', ');
        this.jsCode.push(`${this.pilaName} = [${elementos}];`); // Generar código
        // Análisis semántico
        this.pila = elementos.split(', ').map(e => 
            e.startsWith('"') ? e.slice(1, -1) : parseInt(e)
        );
    }

    visitEmpujar(ctx) {
        const valor = this.visit(ctx.valor());
        this.jsCode.push(`${this.pilaName}.push(${valor});`); // Generar código
        // Análisis semántico
        this.pila.push(valor.includes('"') ? valor.slice(1, -1) : parseInt(valor));
    }

    visitSacar(ctx) {
        this.jsCode.push(`if (${this.pilaName}.length > 0) ${this.pilaName}.pop();`); 
        // Análisis semántico
        if (this.pila.length === 0) this.errores.push("Error: Pila vacía al sacar");
        else this.pila.pop();
    }

    visitMirar(ctx) {
        this.jsCode.push(`console.log("Elemento en el tope:", ${this.pilaName}.at(-1));`);
        // Análisis semántico
        if (this.pila.length === 0) this.errores.push("Error: Pila vacía al mirar");
        else console.log("Elemento en el tope:", this.pila.at(-1));
    }

    visitValor(ctx) {
        return ctx.getText(); // Mantener para JS
    }

    getEstado() {
        return {
            elementos: this.pila,
            errores: this.errores
        };
    }
}